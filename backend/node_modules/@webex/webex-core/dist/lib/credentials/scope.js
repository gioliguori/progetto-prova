"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.diffScopes = diffScopes;
exports.filterScope = filterScope;
exports.sortScope = sortScope;
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));
var _lodash = require("lodash");
/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

var SCOPE_SEPARATOR = ' ';

/**
 * sorts a list of scopes
 * @param {string} scope
 * @returns {string}
 */
function sortScope(scope) {
  if (!scope) {
    return '';
  }
  return scope.split(SCOPE_SEPARATOR).sort().join(SCOPE_SEPARATOR);
}

/**
 * sorts a list of scopes and filters the specified scope
 * @param {string|string[]} toFilter
 * @param {string} scope
 * @returns {string}
 */
function filterScope(toFilter, scope) {
  if (!scope) {
    return '';
  }
  var toFilterArr = (0, _isArray.default)(toFilter) ? toFilter : [toFilter];
  return scope.split(SCOPE_SEPARATOR).filter(function (item) {
    return !toFilterArr.includes(item);
  }).sort().join(SCOPE_SEPARATOR);
}

/**
 * Returns a string containing all items in scopeA that are not in scopeB, or an empty string if there are none.
 *
 * @param {string} scopeA
 * @param {string} scopeB
 * @returns {string}
 */
function diffScopes(scopeA, scopeB) {
  var _scopeA$split, _scopeB$split;
  var a = (_scopeA$split = scopeA === null || scopeA === void 0 ? void 0 : scopeA.split(SCOPE_SEPARATOR)) !== null && _scopeA$split !== void 0 ? _scopeA$split : [];
  var b = (_scopeB$split = scopeB === null || scopeB === void 0 ? void 0 : scopeB.split(SCOPE_SEPARATOR)) !== null && _scopeB$split !== void 0 ? _scopeB$split : [];
  return (0, _lodash.difference)(a, b).sort().join(SCOPE_SEPARATOR);
}
//# sourceMappingURL=scope.js.map
