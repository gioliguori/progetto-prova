{"version":3,"names":["_assert","_interopRequireDefault","require","_uuid","_btoa","_lodash","_nodeRandomName","_httpCore","_whistler","_interopRequireWildcard","_getRequireWildcardCache","e","_WeakMap","r","t","__esModule","_typeof","default","has","get","n","__proto__","a","_Object$defineProperty","_Object$getOwnPropertyDescriptor","u","Object","prototype","hasOwnProperty","call","i","set","ownKeys","_Object$keys","_Object$getOwnPropertySymbols","o","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","_Object$getOwnPropertyDescriptors","_Object$defineProperties","BASE_PATH_SECURE","BASE_PATH","fixToken","token","now","_now","expires_in","expires","refresh_token_expires_in","refresh_token_expires","token_type","access_token","authorization","concat","clientToken","getClientCredentials","_ref","clientId","clientSecret","idbrokerUrl","_promise","resolve","request","method","uri","json","form","grant_type","scope","client_id","client_secret","headers","btoa","then","res","body","requestWithAuth","options","createTestUser","undefined","process","env","WEBEX_CLIENT_ID","WEBEX_CLIENT_SECRET","IDBROKER_BASE_URL","cigServiceUrl","WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL","WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL","Error","authCodeOnly","displayName","randomName","emailTemplate","emailAddress","entitlements","machineType","orgId","password","uuid","v4","roles","scopes","WEBEX_SCOPE","type","forceCreate","ensureExistsInWebexSites","syncInWebexSites","orgAdminAuthorization","user","email","name","loginTestUser","_","defaultsDeep","removeTestUser","id","reject","assert","user_id","refresh_token","user_type","userType","setPreferredSite","schemas","userPreferences","value","preferredSite","identityServiceUrl","userId"],"sources":["index.js"],"sourcesContent":["import assert from 'assert';\n\nimport uuid from 'uuid';\nimport btoa from 'btoa';\nimport _ from 'lodash';\nimport randomName from 'node-random-name';\nimport {request} from '@webex/http-core';\n\nconst BASE_PATH_SECURE = '/users/test_users_s';\nconst BASE_PATH = '/users/test_users';\n\n/**\n * Computes `expires` and `refresh_token_expires` from `expires_in` and\n * `refresh_token_expires_in` and creates an `authorization` string.\n * @param {Object} token\n * @private\n * @returns {Object}\n */\nfunction fixToken(token) {\n  const now = Date.now();\n\n  if (token.expires_in && !token.expires) {\n    token.expires = now + token.expires_in * 1000;\n  }\n\n  if (token.refresh_token_expires_in && !token.refresh_token_expires) {\n    /* eslint camelcase: [0] */\n    token.refresh_token_expires = now + token.refresh_token_expires_in * 1000;\n  }\n\n  if (token.token_type && token.access_token) {\n    token.authorization = `${token.token_type} ${token.access_token}`;\n  }\n\n  return token;\n}\n\nlet clientToken;\n\n/**\n * Fetches credentials to talk to the test_users_s endpoint\n *\n * Caches result in `clientToken` variable for multiple runs\n * @param {Object} options\n * @param {string} options.clientId\n * @param {string} options.clientSecret\n * @param {string} options.idbrokerUrl\n * @private\n * @returns {String}\n */\nfunction getClientCredentials({clientId, clientSecret, idbrokerUrl}) {\n  if (clientToken) {\n    return Promise.resolve(clientToken);\n  }\n\n  return request({\n    method: 'POST',\n    uri: `${idbrokerUrl}/idb/oauth2/v1/access_token`,\n    json: true,\n    form: {\n      grant_type: 'client_credentials',\n      scope:\n        'Identity:SCIM webexsquare:get_conversation spark-test-account:write spark-test-account:read',\n      client_id: clientId,\n      client_secret: clientSecret,\n    },\n    headers: {\n      // Note: we can't request's auth hash here because this endpoint expects\n      // us to send the auth header *without including \"Basic \"* before the\n      // token string\n      authorization: btoa(`${clientId}:${clientSecret}`),\n    },\n  })\n    .then((res) => {\n      const token = fixToken(res.body);\n\n      return `${token.token_type} ${token.access_token}`;\n    })\n    .then((token) => {\n      clientToken = token;\n\n      return clientToken;\n    });\n}\n\n/**\n * Makes a request authorized with client credentials\n * @param {Object} options\n * @param {Object} options.body\n * @param {string} options.body.clientId\n * @param {string} options.body.clientSecret\n * @param {string} options.body.idbrokerUrl\n * @private\n * @returns {Promise<HttpResponseObject>}\n */\nfunction requestWithAuth(options) {\n  return getClientCredentials(options.body).then((authorization) => {\n    options.headers = options.headers || {};\n    options.headers.authorization = authorization;\n\n    return request(options);\n  });\n}\n\n/**\n * @typedef {Object} AccessTokenObject\n * @property {string} token.access_token\n * @property {Number} token.expires_in\n * @property {string} token.token_type\n * @property {string} token.refresh_token\n * @property {Number} token.refresh_token_expires_in\n * @property {string} token.expires\n * @property {string} token.refresh_token_expires\n */\n\n/**\n * @typedef {Object} CreateUserOptions\n * @property {boolean} [authCodeOnly] generates auth_code\n * @param {string} [clientId] defaults to WEBEX_CLIENT_ID\n * @param {string} [clientSecret] defaults to WEBEX_CLIENT_SECRET\n * @param {string} [cigServiceUrl] defaults to WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL\n * @property {string} [displayName]\n * @property {string} [emailAddress]\n * @property {Array.<string>} [entitlements]\n * @param {string} [idbrokerUrl] defaults to IDBROKER_BASE_URL\n * @property {string} [machineType] used when creating a machine user/device\n * @property {string} [orgId] organization ID to create the user under\n * @property {string} [password] defaults to a random password\n * @property {string} [roles] defaults to []\n * @property {string} [scope] defaults to WEBEX_SCOPE\n * @property {string} [type] used to create a machine\n * @property {boolean} [forceCreate] force creates the user, to be used in conjunction with ensureExistsInWebexSites\n * @property {boolean} [ensureExistsInWebexSites] syncs the user in provided webexSites (syncInWebexSites)\n * @property {Array.<string>} [syncInWebexSites] used to define in which sites account should be synced\n * @property {string} [orgAdminAuthorization] bearer token of org admin to use syncInWebexSites\n */\n\n/**\n * @typedef {Object} TestUserObject\n * @property {string} password\n * @property {string} emailAddress\n * @property {string} displayName\n * @property {string} id\n * @property {string} userName\n * @property {string} email\n * @property {string} name\n * @property {string} givenName\n * @property {string} type\n * @property {Array.<string>} entitlements\n * @property {string} orgId\n * @property {AccessTokenObject} token\n */\n\n/**\n * Creates a test user\n * @param {CreateUserOptions} options\n * @returns {Promise.<TestUserObject>}\n */\nexport function createTestUser(options = {}) {\n  const clientId = options.clientId || process.env.WEBEX_CLIENT_ID;\n  const clientSecret = options.clientSecret || process.env.WEBEX_CLIENT_SECRET;\n  const idbrokerUrl = options.idbrokerUrl || process.env.IDBROKER_BASE_URL;\n  const cigServiceUrl =\n    options.cigServiceUrl ||\n    process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL ||\n    process.env.WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL;\n\n  if (!clientId) {\n    throw new Error('options.clientId or process.env.WEBEX_CLIENT_ID must be defined');\n  }\n\n  if (!clientSecret) {\n    throw new Error('options.clientSecret or process.env.WEBEX_CLIENT_SECRET must be defined');\n  }\n\n  if (!idbrokerUrl) {\n    throw new Error('options.idbrokerUrl or process.env.IDBROKER_BASE_URL must be defined');\n  }\n\n  if (!cigServiceUrl) {\n    throw new Error(\n      'options.cigServiceUrl or process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL must be defined'\n    );\n  }\n\n  const body = {\n    authCodeOnly: options.authCodeOnly,\n    clientId,\n    clientSecret,\n    displayName: options.displayName || randomName(),\n    emailTemplate: options.emailAddress,\n    entitlements: options.entitlements || [\n      'spark',\n      'squaredCallInitiation',\n      'squaredRoomModeration',\n      'squaredInviter',\n      'webExSquared',\n      'basicMessage',\n    ],\n    idbrokerUrl,\n    machineType: options.machineType,\n    orgId: options.orgId,\n    // The five characters on the end are to hit all the password requirements\n    password: options.password || `${uuid.v4()}zAY1*`,\n    roles: options.roles || [],\n    scopes: options.scope || process.env.WEBEX_SCOPE,\n    type: options.type,\n    forceCreate: options.forceCreate || false,\n    ensureExistsInWebexSites: options.ensureExistsInWebexSites || false,\n    syncInWebexSites: options.syncInWebexSites,\n    orgAdminAuthorization: options.orgAdminAuthorization,\n  };\n\n  return requestWithAuth({\n    method: 'POST',\n    uri: `${cigServiceUrl}${BASE_PATH_SECURE}`,\n    json: true,\n    body,\n  }).then((res) => ({\n    password: body.password,\n    emailAddress: res.body.user.email,\n    displayName: res.body.user.name,\n    ...res.body.user,\n    token: fixToken(res.body.token),\n  }));\n}\n\n/**\n * Exchanges a user name/password for an access token\n * @param {Object} options\n * @param {string} options.id\n * @param {string} options.email\n * @param {string} options.password\n * @param {string} options.clientId\n * @param {string} options.clientSecret\n * @param {string} options.cigServiceUrl\n * @returns {Promise.<AccessTokenObject>}\n */\nexport function loginTestUser(options) {\n  const clientId = options.clientId || process.env.WEBEX_CLIENT_ID;\n  const clientSecret = options.clientSecret || process.env.WEBEX_CLIENT_SECRET;\n  const cigServiceUrl =\n    options.cigServiceUrl ||\n    process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL ||\n    process.env.WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL;\n\n  if (!clientId) {\n    throw new Error('options.clientId or process.env.WEBEX_CLIENT_ID must be defined');\n  }\n\n  if (!clientSecret) {\n    throw new Error('options.clientSecret or process.env.WEBEX_CLIENT_SECRET must be defined');\n  }\n\n  if (!cigServiceUrl) {\n    throw new Error(\n      'options.cigServiceUrl or process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL must be defined'\n    );\n  }\n\n  return request({\n    method: 'POST',\n    uri: `${cigServiceUrl}${BASE_PATH}/login`,\n    json: true,\n    body: _.defaultsDeep(options, {\n      clientId,\n      clientSecret,\n    }),\n  }).then((res) => fixToken(res.body));\n}\n\n/**\n * Removes a test user\n * @param {Object} options\n * @param {string} options.id user id to remove\n * @param {string} options.cigServiceUrl\n * @param {Object} options.token\n * @param {string} options.token.authorization\n * @param {string} [options.token.refresh_token]\n * @returns {Promise}\n */\nexport function removeTestUser(options = {}) {\n  const cigServiceUrl =\n    options.cigServiceUrl ||\n    process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL ||\n    process.env.WEBEX_TEST_USERS_CONVERSATION_SERVICE_URL;\n\n  if (!cigServiceUrl) {\n    throw new Error(\n      'options.cigServiceUrl or process.env.WEBEX_TEST_USERS_CI_GATEWAY_SERVICE_URL must be defined'\n    );\n  }\n\n  if (!options.id) {\n    return Promise.reject(new Error('options.id is required'));\n  }\n\n  if (!options.token) {\n    return loginTestUser(options).then((token) => {\n      options.token = token;\n\n      return removeTestUser(options);\n    });\n  }\n\n  assert(options.token.authorization, 'options.token.authorization must be defined');\n\n  return request({\n    method: 'POST',\n    json: true,\n    headers: {\n      authorization: options.token.authorization,\n    },\n    body: {\n      /* eslint-disable camelcase */\n      user_id: options.id,\n      refresh_token: options.token.refresh_token,\n      user_type: options.userType || 'PERSON',\n      /* eslint-enable camelcase */\n    },\n    uri: `${cigServiceUrl}${BASE_PATH}/delete`,\n  });\n}\n\n/**\n * Sets the preferredWebexSite for the provided user\n *\n * This method should be used to ensure a created test user has the right webex site set.\n *\n * @param {Object} options\n * @param {string} options.userId user id to set site\n * @param {string} options.preferredSite new preferred webexsite\n * @param {string} options.orgId orgId of the site\n * @param {string} options.identityServiceUrl url of identity service\n * @param {string} options.authorization\n * @param {string} options.clientId\n * @param {string} options.clientSecret\n * @returns {Promise}\n */\nexport function setPreferredSite(options = {}) {\n  const clientId = options.clientId || process.env.WEBEX_CLIENT_ID;\n  const clientSecret = options.clientSecret || process.env.WEBEX_CLIENT_SECRET;\n\n  if (!clientId) {\n    throw new Error('options.clientId or process.env.WEBEX_CLIENT_ID must be defined');\n  }\n\n  if (!clientSecret) {\n    throw new Error('options.clientSecret or process.env.WEBEX_CLIENT_SECRET must be defined');\n  }\n\n  /* eslint-disable no-useless-escape */\n  const body = {\n    schemas: ['urn:scim:schemas:core:1.0', 'urn:scim:schemas:extension:cisco:commonidentity:1.0'],\n    userPreferences: [\n      {\n        value: `\\\"preferredWebExSite\\\":\\\"${options.preferredSite}\\\"`,\n      },\n    ],\n  };\n  /* eslint-enable no-useless-escape */\n\n  return request({\n    method: 'PATCH',\n    headers: {\n      authorization: options.authorization,\n    },\n    uri: `${options.identityServiceUrl}/identity/scim/${options.orgId}/v1/Users/${options.userId}`,\n    json: true,\n    body,\n  });\n}\n\nexport {\n  default as createWhistlerTestUser,\n  removeTestUser as removeWhistlerTestUser,\n} from './whistler';\n"],"mappings":"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"}