import { StatelessWebexPlugin } from '@webex/webex-core';
import { Event, ClientType, SubClientType, NetworkType, EnvironmentType, NewEnvironmentType, ClientEvent, SubmitClientEventOptions, MediaQualityEvent, SubmitMQEOptions, SubmitMQEPayload, ClientLaunchMethodType, ClientEventError, ClientEventPayload, ClientSubServiceType, BrowserLaunchMethodType } from '../metrics.types';
type GetOriginOptions = {
    clientType: ClientType;
    subClientType: SubClientType;
    networkType?: NetworkType;
    clientLaunchMethod?: ClientLaunchMethodType;
    browserLaunchMethod?: BrowserLaunchMethodType;
    environment?: EnvironmentType;
    newEnvironment?: NewEnvironmentType;
};
type GetIdentifiersOptions = {
    meeting?: any;
    mediaConnections?: any[];
    correlationId?: string;
    preLoginId?: string;
    globalMeetingId?: string;
    webexConferenceIdStr?: string;
};
/**
 * @description Util class to handle Call Analyzer Metrics
 * @export
 * @class CallDiagnosticMetrics
 */
export default class CallDiagnosticMetrics extends StatelessWebexPlugin {
    private callDiagnosticEventsBatcher;
    private preLoginMetricsBatcher;
    private logger;
    private hasLoggedBrowserSerial;
    private device;
    validator: (options: {
        type: 'mqe' | 'ce';
        event: Event;
    }) => Promise<{
        event: Event;
        valid: boolean;
    }>;
    /**
     * Constructor
     * @param args
     */
    constructor(...args: any[]);
    /**
     * Returns the login type of the current user
     * @returns one of 'login-ci','unverified-guest', null
     */
    getCurLoginType(): "unverified-guest" | "login-ci";
    /**
     * Returns if the meeting has converged architecture enabled
     * @param options.meetingId
     */
    getIsConvergedArchitectureEnabled({ meetingId }: {
        meetingId?: string;
    }): boolean;
    /**
     * Returns meeting's subServiceType
     * @param meeting
     * @returns
     */
    getSubServiceType(meeting?: any): ClientSubServiceType;
    /**
     * Get origin object for Call Diagnostic Event payload.
     * @param options
     * @param meetingId
     * @returns
     */
    getOrigin(options: GetOriginOptions, meetingId?: string): {
        name: "endpoint" | "antares" | "beech" | "breakout" | "cb" | "cloudproxy" | "edonus" | "givr" | "hecate" | "hedge" | "hesiod" | "homer" | "superhomer" | "l2sip" | "linus" | "locus" | "mcc" | "mcs" | "mercury" | "mes" | "mjs" | "mmp" | "mygdon" | "orpheus" | "page" | "poros" | "rhesos" | "terminus" | "tpgw" | "ucc" | "wdm" | "webexivr";
        userAgent: string;
        buildType?: "debug" | "test" | "prod" | "tap" | "analyzer-test";
        upgradeChannel?: string;
        instanceId?: string;
        networkType: "wifi" | "ethernet" | "cellular" | "unknown";
        localIP?: string;
        usingProxy?: boolean;
        mediaEngineSoftwareVersion?: string;
        environment?: string;
        newEnvironment?: string;
        clientInfo?: {
            os?: "other" | "chrome" | "windows" | "mac" | "ios" | "android" | "linux" | "android-x64" | "android-arm64" | "uwp-arm64";
            osVersion?: string;
            localIP?: string;
            gatewayIP?: string;
            macAddress?: string;
            localNetworkPrefix?: string;
            publicNetworkPrefix?: string;
            browserLaunchMethod?: "url-handler" | "activex" | "npapi" | "extension" | "cwsapi" | "java" | "tfs" | "webacd" | "thinclient" | "switch-to-web" | "switch-to-native";
            clientLaunchMethod?: "url-handler" | "universal-link" | "voice-command" | "notification" | "manual" | "teams-cross-launch" | "mc-cross-launch";
            browser?: string;
            browserVersion?: string;
            clientType?: "MEETING_CENTER" | "EVENT_CENTER" | "TRAINING_CENTER" | "TEAMS_CLIENT" | "TEAMS_DEVICE" | "TEAMS_SHARE" | "SIP" | "RECORDING" | "CLOUD_AWARE_SIP" | "TEAMS_WXC_CLIENT" | "WXC_CLIENT" | "WXC_DEVICE" | "WEBEX_JS_SDK" | "VOICEA_CLIENT" | "CISCO_SIP_GW" | "WEBEX_SDK" | "CPAAS_THIRD_PARTY_SDK" | "WXC_THIRD_PARTY" | "WXCC";
            subClientType?: "TEAMS_DEVICE" | "DESKTOP_APP" | "DESKTOP_APP_VDI" | "DEVICE_CURRENT" | "DEVICE_LEGACY_2020" | "HOLOGRAM_HEADSET_APP" | "HVDI_APP" | "MIXED" | "MOBILE_APP" | "MOBILE_NETWORK" | "PAGE" | "VDI_APP" | "WEB_APP";
            clientVersion?: string;
            clientVersionStatus?: "CURRENT" | "LEGACY" | "UNSUPPORTED";
            localClientVersion?: string;
            modelNumber?: string;
            joinFirstUpdateLater?: "ep-enabled" | "sp-enabled" | "not-enabled";
            standbyUsed?: boolean;
            prefetchDocShowUsed?: boolean;
            fastJoinUsed?: boolean;
            clientDownloadSize?: number;
            clientDownloadFileCount?: number;
            nodeId?: number;
            machineInfo?: string;
            parentAppName?: string;
            parentAppInPermitList?: boolean;
            meetingSiteType?: "train" | "webex-11" | "orion";
            CDNEnabled?: boolean;
            clientMajorVersion?: string;
            majorVersion?: number;
            minorVersion?: number;
            revision?: number;
            isValidClientVersion?: boolean;
            cpuInfo?: {
                description: string;
                clockSpeedGigaHertz: number;
                numberOfCores: number;
                architecture: "unknown" | "intel32" | "intel64" | "amd32" | "amd64" | "arm32" | "arm64";
                staticPerformance?: string;
                additionalProperties?: false;
            };
            shareType?: "cb-normal-share" | "ce-airplay-share" | "ce-direct-share" | "ce-gui-loopback-share" | "ce-input-source-share" | "ce-input-source-share-hdmi" | "ce-input-source-share-usbc" | "ce-jpg-share" | "ce-miracast-share" | "mcs-normal-share" | "mcs-normal-audio-share" | "mcs-hfps-share" | "mcs-hfps-audio-share";
            videoDisplayMode?: "grid-view" | "active-speaker-view";
            videoLayoutType?: "stack" | "stackWithShare" | "sideBySide" | "sideBySideWithShare" | "grid" | "floatingActive" | "floatingThumbnail" | "floatingGrid" | "overlay" | "focus" | "prominent" | "focusWithShare" | "prominentWithShare" | "equal" | "equalWithShare";
            videoRenderType?: "wme" | "client_d3d" | "client_gdi";
            vdiInfo?: {};
            is64BitsClient?: boolean;
            webexAppVersion?: string;
            launch32BitsReason?: "forcewin32" | "disablewin64" | "platform_win32" | "platform_arm" | "platform_unknown" | "version_below_41.11";
            inMeetingUpdate?: boolean;
            mtaVersion?: string;
            isWarholOpening?: boolean;
            additionalProperties?: false;
        };
        emmVendorId?: string;
        isHybridMedia?: boolean;
        originData?: {};
        additionalProperties?: false;
    };
    /**
     * Gather identifier details for call diagnostic payload.
     * @throws Error if initialization fails.
     * @param options
     */
    getIdentifiers(options: GetIdentifiersOptions): {
        attendeeId?: string;
        breakoutGroupId?: string;
        breakoutMoveId?: string;
        breakoutSessionId?: string;
        confluenceId?: string;
        cpaasIdentifiers?: {
            imiTenantId: string;
            devClientId: string;
            imiServiceId: string;
            imiAppId: string;
            sessionId: string;
            sessionInstanceId: string;
            additionalProperties?: false;
        };
        csdmDeviceUrl?: string;
        destinationBreakoutSessionId?: string;
        destinationLocusSessionId?: string;
        destinationLocusUrl?: string;
        destinationVenueId?: string;
        deviceId?: string;
        globalMeetingId?: string;
        ivrCallId?: string;
        ivrDialogId?: string;
        ivrId?: string;
        callId?: string;
        locusId?: string;
        locusSessionId?: string;
        locusStartTime?: string;
        locusUrl?: string;
        machineId?: string;
        mediaAgentAlias?: string;
        mediaAgentGroupId?: string;
        meetClusterName?: string;
        meetingInstanceId?: string;
        meetingLookupUrl?: string;
        meetingOrgId?: string;
        msteamsTenantGuid?: string;
        msteamsConferenceId?: string;
        msteamsMeetingId?: string;
        oauth2ClientId?: string;
        orgId?: string;
        provisionalCorrelationId?: string;
        roomId?: string;
        sipCallId?: string;
        sipSessionId?: {
            local?: string;
            remote?: string;
            additionalProperties?: false;
        };
        sipUri?: string;
        subConfId?: string;
        tenantId?: string;
        trackingId?: string;
        userId?: string;
        venueId?: string;
        venueUrl?: string;
        whiteboardUrl?: string;
        webexConferenceId?: number;
        webexClusterName?: string;
        webexConferenceIdStr?: string;
        webexDataCenter?: string;
        webexGuestId?: number;
        webexMeetingId?: number;
        webexNodeId?: number;
        webexSiteId?: number;
        webexSiteName?: string;
        webexSiteUuid?: string;
        webexUserId?: number;
        webexWebDomain?: string;
        correlationId: string;
        additionalProperties?: false;
    } | {
        attendeeId?: string;
        breakoutGroupId?: string;
        breakoutMoveId?: string;
        breakoutSessionId?: string;
        confluenceId?: string;
        cpaasIdentifiers?: {
            imiTenantId: string;
            devClientId: string;
            imiServiceId: string;
            imiAppId: string;
            sessionId: string;
            sessionInstanceId: string;
            additionalProperties?: false;
        };
        csdmDeviceUrl?: string;
        destinationBreakoutSessionId?: string;
        destinationLocusSessionId?: string;
        destinationLocusUrl?: string;
        destinationVenueId?: string;
        deviceId?: string;
        globalMeetingId?: string;
        ivrCallId?: string;
        ivrDialogId?: string;
        ivrId?: string;
        callId?: string;
        locusId?: string;
        locusSessionId?: string;
        locusStartTime?: string;
        locusUrl?: string;
        machineId?: string;
        mediaAgentAlias?: string;
        mediaAgentGroupId?: string;
        meetClusterName?: string;
        meetingInstanceId?: string;
        meetingLookupUrl?: string;
        meetingOrgId?: string;
        msteamsTenantGuid?: string;
        msteamsConferenceId?: string;
        msteamsMeetingId?: string;
        oauth2ClientId?: string;
        orgId?: string;
        provisionalCorrelationId?: string;
        roomId?: string;
        sipCallId?: string;
        sipSessionId?: {
            local?: string;
            remote?: string;
            additionalProperties?: false;
        };
        sipUri?: string;
        subConfId?: string;
        tenantId?: string;
        trackingId?: string;
        userId?: string;
        venueId?: string;
        venueUrl?: string;
        whiteboardUrl?: string;
        webexConferenceId?: number;
        webexClusterName?: string;
        webexConferenceIdStr?: string;
        webexDataCenter?: string;
        webexGuestId?: number;
        webexMeetingId?: number;
        webexNodeId?: number;
        webexSiteId?: number;
        webexSiteName?: string;
        webexSiteUuid?: string;
        webexUserId?: number;
        webexWebDomain?: string;
        correlationId: string;
        additionalProperties?: false;
    };
    /**
     * Create diagnostic event, which can hold client event, feature event or MQE event data.
     * This just initiates the shared properties that are required for all the 3 event categories.
     * @param eventData
     * @param options
     * @returns
     */
    prepareDiagnosticEvent(eventData: Event['event'], options: any): Event;
    /**
     * TODO: NOT IMPLEMENTED
     * Submit Feature Event
     * @returns
     */
    submitFeatureEvent(): void;
    /**
     * Submit Media Quality Event
     * @param args - submit params
     * @param arg.name - event key
     * @param arg.payload - additional payload to be merge with the default payload
     * @param arg.options - options
     */
    submitMQE({ name, payload, options, }: {
        name: MediaQualityEvent['name'];
        payload: SubmitMQEPayload;
        options: SubmitMQEOptions;
    }): void;
    /**
     * Return Client Event payload by client error code
     * @param arg - get error arg
     * @param arg.clientErrorCode
     * @param arg.serviceErrorCode
     * @param arg.payloadOverrides
     * @param arg.httpStatusCode
     * @returns
     */
    getErrorPayloadForClientErrorCode({ clientErrorCode, serviceErrorCode, serviceErrorName, rawErrorMessage, payloadOverrides, httpStatusCode, }: {
        clientErrorCode: number;
        serviceErrorCode: any;
        serviceErrorName?: any;
        rawErrorMessage?: string;
        payloadOverrides?: any;
        httpStatusCode?: number;
    }): ClientEventError;
    /**
     * Generate error payload for Client Event
     * @param rawError
     */
    generateClientEventErrorPayload(rawError: any): {
        fatal: boolean;
        category: "signaling" | "media" | "network" | "other" | "expected";
        errorDescription?: string;
        errorCode?: number;
        errorCodeStr?: string;
        httpCode?: number;
        errorCodeExt1?: number;
        errorData?: {};
        rawErrorMessage?: string;
        mediaDeviceErrors?: string;
        shownToUser: boolean;
        serviceErrorCode?: number;
        name: "other" | "locus.response" | "media-engine" | "ice.failed" | "locus.leave" | "client.leave" | "media-device" | "media-sca" | "wxc";
        additionalProperties?: false;
    };
    /**
     * Create client event object for in meeting events
     * @param arg - create args
     * @param arg.event - event key
     * @param arg.options - options
     * @returns object
     */
    private createClientEventObjectInMeeting;
    /**
     * Create client event object for pre meeting events
     * @param arg - create args
     * @param arg.event - event key
     * @param arg.options - payload
     * @returns object
     */
    private createClientEventObjectPreMeeting;
    /**
     * Prepare Client Event CA event.
     * @param arg - submit params
     * @param arg.event - event key
     * @param arg.payload - additional payload to be merged with default payload
     * @param arg.options - payload
     * @returns {any} options to be with fetch
     * @throws
     */
    private prepareClientEvent;
    /**
     * Submit Client Event CA event.
     * @param arg - submit params
     * @param arg.event - event key
     * @param arg.payload - additional payload to be merged with default payload
     * @param arg.options - payload
     * @throws
     */
    submitClientEvent({ name, payload, options, }: {
        name: ClientEvent['name'];
        payload?: ClientEventPayload;
        options?: SubmitClientEventOptions;
    }): Promise<any>;
    /**
     * Prepare the event and send the request to metrics-a service.
     * @param event
     * @returns promise
     */
    submitToCallDiagnostics(event: Event): Promise<any>;
    /**
     * Prepare the event and send the request to metrics-a service, pre login.
     * @param event
     * @param preLoginId
     * @returns
     */
    submitToCallDiagnosticsPreLogin: (event: Event, preLoginId?: string) => Promise<any>;
    /**
     * Builds a request options object to later be passed to fetch().
     * @param arg - submit params
     * @param arg.event - event key
     * @param arg.payload - additional payload to be merged with default payload
     * @param arg.options - client event options
     * @returns {Promise<any>}
     * @throws
     */
    buildClientEventFetchRequestOptions({ name, payload, options, }: {
        name: ClientEvent['name'];
        payload?: ClientEventPayload;
        options?: SubmitClientEventOptions;
    }): Promise<any>;
    /**
     * Returns true if the specified serviceErrorCode maps to an expected error.
     * @param {number} serviceErrorCode the service error code
     * @returns {boolean}
     */
    isServiceErrorExpected(serviceErrorCode: number): boolean;
    /**
     * This method is used to set the device information by internal-plugin-device
     * @param {device} object The webex.internal.device object
     * @returns {undefined}
     */
    setDeviceInfo(device: any): void;
}
export {};
