{"version":3,"names":[],"sources":["metrics.types.ts"],"sourcesContent":["import {\n  ClientEvent as RawClientEvent,\n  Event as RawEvent,\n  MediaQualityEvent as RawMediaQualityEvent,\n} from '@webex/event-dictionary-ts';\n\nexport type Event = Omit<RawEvent, 'event'> & {event: RawClientEvent | RawMediaQualityEvent};\n\nexport type ClientEventError = NonNullable<RawClientEvent['errors']>[0];\n\nexport type EnvironmentType = NonNullable<RawEvent['origin']['environment']>;\n\nexport type NewEnvironmentType = NonNullable<RawEvent['origin']['newEnvironment']>;\n\nexport type ClientLaunchMethodType = NonNullable<\n  RawEvent['origin']['clientInfo']\n>['clientLaunchMethod'];\n\nexport type BrowserLaunchMethodType = NonNullable<\n  RawEvent['origin']['clientInfo']\n>['browserLaunchMethod'];\n\nexport type SubmitClientEventOptions = {\n  meetingId?: string;\n  mediaConnections?: any[];\n  rawError?: any;\n  correlationId?: string;\n  preLoginId?: string;\n  environment?: EnvironmentType;\n  newEnvironmentType?: NewEnvironmentType;\n  clientLaunchMethod?: ClientLaunchMethodType;\n  browserLaunchMethod?: BrowserLaunchMethodType;\n  webexConferenceIdStr?: string;\n  globalMeetingId?: string;\n};\n\nexport type SubmitMQEOptions = {\n  meetingId: string;\n  mediaConnections?: any[];\n  networkType?: Event['origin']['networkType'];\n  webexConferenceIdStr?: string;\n  globalMeetingId?: string;\n};\n\nexport type InternalEvent = {\n  name:\n    | 'internal.client.meetinginfo.request'\n    | 'internal.client.meetinginfo.response'\n    | 'internal.register.device.request'\n    | 'internal.register.device.response'\n    | 'internal.reset.join.latencies'\n    | 'internal.client.meeting.click.joinbutton'\n    | 'internal.host.meeting.participant.admitted'\n    | 'internal.client.meeting.interstitial-window.showed'\n    | 'internal.client.interstitial-window.click.joinbutton'\n    | 'internal.client.add-media.turn-discovery.start'\n    | 'internal.client.add-media.turn-discovery.end';\n\n  payload?: never;\n  options?: never;\n};\n\nexport interface ClientEvent {\n  name: RawClientEvent['name'];\n  payload?: RawClientEvent;\n  options?: SubmitClientEventOptions;\n}\n\nexport interface BehavioralEvent {\n  // TODO: not implemented\n  name: 'host.meeting.participant.admitted' | 'sdk.media-flow.started';\n  payload?: never;\n  options?: never;\n}\n\nexport interface OperationalEvent {\n  // TODO: not implemented\n  name: never;\n  payload?: never;\n  options?: never;\n}\n\nexport interface FeatureEvent {\n  // TODO: not implemented\n  name: never;\n  payload?: never;\n  options?: never;\n}\n\nexport interface MediaQualityEvent {\n  name: RawMediaQualityEvent['name'];\n  payload?: RawMediaQualityEvent;\n  options: SubmitMQEOptions;\n}\n\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends (infer U)[]\n    ? RecursivePartial<U>[]\n    : T[P] extends object\n    ? RecursivePartial<T[P]>\n    : T[P];\n};\n\nexport type MetricEventNames =\n  | InternalEvent['name']\n  | ClientEvent['name']\n  | BehavioralEvent['name']\n  | OperationalEvent['name']\n  | FeatureEvent['name']\n  | MediaQualityEvent['name'];\n\nexport type ClientInfo = NonNullable<RawEvent['origin']['clientInfo']>;\nexport type ClientType = NonNullable<RawEvent['origin']['clientInfo']>['clientType'];\nexport type SubClientType = NonNullable<RawEvent['origin']['clientInfo']>['subClientType'];\nexport type NetworkType = NonNullable<RawEvent['origin']>['networkType'];\n\nexport type ClientSubServiceType = ClientEvent['payload']['webexSubServiceType'];\nexport type ClientEventPayload = RecursivePartial<ClientEvent['payload']>;\nexport type ClientEventLeaveReason = ClientEvent['payload']['leaveReason'];\nexport type ClientEventPayloadError = ClientEvent['payload']['errors'];\n\nexport type MediaQualityEventAudioSetupDelayPayload = NonNullable<\n  MediaQualityEvent['payload']\n>['audioSetupDelay'];\nexport type MediaQualityEventVideoSetupDelayPayload = NonNullable<\n  MediaQualityEvent['payload']\n>['videoSetupDelay'];\n\nexport type SubmitMQEPayload = RecursivePartial<MediaQualityEvent['payload']> & {\n  intervals: NonNullable<MediaQualityEvent['payload']>['intervals'];\n};\n\nexport type SubmitInternalEvent = (args: {\n  name: InternalEvent['name'];\n  payload?: RecursivePartial<InternalEvent['payload']>;\n  options?: any;\n}) => void;\n\nexport type SubmitBehavioralEvent = (args: {\n  name: BehavioralEvent['name'];\n  payload?: RecursivePartial<BehavioralEvent['payload']>;\n  options?: any;\n}) => void;\n\nexport type SubmitClientEvent = (args: {\n  name: ClientEvent['name'];\n  payload?: RecursivePartial<ClientEvent['payload']>;\n  options?: SubmitClientEventOptions;\n}) => Promise<any>;\n\nexport type SubmitOperationalEvent = (args: {\n  name: OperationalEvent['name'];\n  payload?: RecursivePartial<OperationalEvent['payload']>;\n  options?: any;\n}) => void;\n\nexport type SubmitMQE = (args: {\n  name: MediaQualityEvent['name'];\n  payload: SubmitMQEPayload;\n  options: any;\n}) => void;\n\nexport type BuildClientEventFetchRequestOptions = (args: {\n  name: ClientEvent['name'];\n  payload?: RecursivePartial<ClientEvent['payload']>;\n  options?: SubmitClientEventOptions;\n}) => Promise<any>;\n\nexport type PreComputedLatencies =\n  | 'internal.client.pageJMT'\n  | 'internal.download.time'\n  | 'internal.get.cluster.time'\n  | 'internal.click.to.interstitial'\n  | 'internal.refresh.captcha.time'\n  | 'internal.exchange.ci.token.time'\n  | 'internal.get.u2c.time'\n  | 'internal.call.init.join.req'\n  | 'internal.other.app.api.time'\n  | 'internal.api.fetch.intelligence.models';\n"],"mappings":""}