"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _lodash = require("lodash");
var _batcher = _interopRequireDefault(require("../batcher"));
var _callDiagnosticMetrics = require("./call-diagnostic-metrics.util");
var _config = require("./config");
var _utils = require("../utils");
var CallDiagnosticEventsBatcher = _batcher.default.extend({
  namespace: 'Metrics',
  /**
   * Prepare item
   * @param {any} item
   * @returns {Promise<any>}
   */
  prepareItem: function prepareItem(item) {
    return _promise.default.resolve((0, _callDiagnosticMetrics.prepareDiagnosticMetricItem)(this.webex, item));
  },
  /**
   * Prepare request, add time sensitive date etc.
   * @param {any[]} queue
   * @returns {Promise<any[]>}
   */
  prepareRequest: function prepareRequest(queue) {
    // Add sent timestamp
    queue.forEach(function (item) {
      item.eventPayload.originTime = item.eventPayload.originTime || {};
      item.eventPayload.originTime.sent = new Date().toISOString();
    });
    return _promise.default.resolve(queue);
  },
  /**
   *
   * @param {any} payload
   * @returns {Promise<any>}
   */
  submitHttpRequest: function submitHttpRequest(payload) {
    var _this = this;
    var batchId = (0, _lodash.uniqueId)('ca-batch-');
    return this.webex.request({
      method: 'POST',
      service: 'metrics',
      resource: 'clientmetrics',
      body: {
        metrics: payload
      },
      waitForServiceTimeout: this.webex.config.metrics.waitForServiceTimeout
    }).then(function (res) {
      _this.webex.logger.log(_config.CALL_DIAGNOSTIC_LOG_IDENTIFIER, "CallDiagnosticEventsBatcher: @submitHttpRequest#".concat(batchId, ". Request successful."));
      return res;
    }).catch(function (err) {
      _this.webex.logger.error(_config.CALL_DIAGNOSTIC_LOG_IDENTIFIER, "CallDiagnosticEventsBatcher: @submitHttpRequest#".concat(batchId, ". Request failed:"), "error: ".concat((0, _utils.generateCommonErrorMetadata)(err)));
      return _promise.default.reject(err);
    });
  }
});
var _default = exports.default = CallDiagnosticEventsBatcher;
//# sourceMappingURL=call-diagnostic-metrics-batcher.js.map
