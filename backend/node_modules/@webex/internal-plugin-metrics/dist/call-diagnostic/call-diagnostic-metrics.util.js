"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.userAgentToString = exports.setMetricTimings = exports.prepareDiagnosticMetricItem = exports.isUnauthorizedError = exports.isSdpOfferCreationError = exports.isNetworkError = exports.isMeetingInfoServiceError = exports.isLocusServiceErrorCode = exports.isBrowserMediaErrorName = exports.getBuildType = exports.generateClientErrorCodeForIceFailure = exports.extractVersionMetadata = exports.clearEmptyKeysRecursively = exports.anonymizeIPAddress = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/typeof"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/is-array"));
var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));
var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));
var _ipAnonymize = _interopRequireDefault(require("ip-anonymize"));
var _util = _interopRequireDefault(require("util"));
var _common = require("@webex/common");
var _webexCore = require("@webex/webex-core");
var _lodash = require("lodash");
var _config = require("./config");
/* eslint-disable valid-jsdoc */

var _BrowserDetection = (0, _common.BrowserDetection)(),
  getOSName = _BrowserDetection.getOSName,
  getOSVersion = _BrowserDetection.getOSVersion,
  getBrowserName = _BrowserDetection.getBrowserName,
  getBrowserVersion = _BrowserDetection.getBrowserVersion;
var anonymizeIPAddress = exports.anonymizeIPAddress = function anonymizeIPAddress(localIp) {
  return (0, _ipAnonymize.default)(localIp, 28, 96);
};

/**
 * Returns a formated string of the user agent.
 *
 * @returns {string} formatted user agent information
 */
var userAgentToString = exports.userAgentToString = function userAgentToString(_ref) {
  var clientName = _ref.clientName,
    webexVersion = _ref.webexVersion;
  var userAgentOption;
  var browserInfo;
  var clientInfo = _util.default.format('client=%s', "".concat(clientName));
  if (['chrome', 'firefox', 'msie', 'msedge', 'safari'].indexOf(getBrowserName().toLowerCase()) !== -1) {
    browserInfo = _util.default.format('browser=%s', "".concat(getBrowserName().toLowerCase(), "/").concat(getBrowserVersion().split('.')[0]));
  }
  var osInfo = _util.default.format('os=%s', "".concat(getOSName(), "/").concat(getOSVersion().split('.')[0]));
  if (browserInfo) {
    userAgentOption = "(".concat(browserInfo);
  }
  if (osInfo) {
    userAgentOption = userAgentOption ? "".concat(userAgentOption, "; ").concat(clientInfo, "; ").concat(osInfo) : "".concat(clientInfo, "; (").concat(osInfo);
  }
  if (userAgentOption) {
    userAgentOption += ')';
    return _util.default.format('webex-js-sdk/%s %s', "".concat(process.env.NODE_ENV, "-").concat(webexVersion), userAgentOption);
  }
  return _util.default.format('webex-js-sdk/%s', "".concat(process.env.NODE_ENV, "-").concat(webexVersion));
};

/**
 * Iterates object recursively and removes any
 * property that returns isEmpty for it's associated value
 * isEmpty = implementation from Lodash.
 *
 * It modifies the object in place (mutable)
 *
 * @param obj - input
 * @returns
 */
var clearEmptyKeysRecursively = exports.clearEmptyKeysRecursively = function clearEmptyKeysRecursively(obj) {
  // Check if the object is empty
  if ((0, _keys.default)(obj).length === 0) {
    return;
  }
  (0, _keys.default)(obj).forEach(function (key) {
    if (((0, _typeof2.default)(obj[key]) === 'object' || typeof obj[key] === 'string' || (0, _isArray.default)(obj[key])) && (0, _lodash.isEmpty)(obj[key])) {
      delete obj[key];
    }
    if ((0, _isArray.default)(obj[key])) {
      obj[key] = (0, _toConsumableArray2.default)(obj[key].filter(function (x) {
        return !!x;
      }));
    }
    if ((0, _typeof2.default)(obj[key]) === 'object') {
      clearEmptyKeysRecursively(obj[key]);
    }
  });
};

/**
 * Locus error codes start with 2. The next three digits are the
 * HTTP status code related to the error code (like 400, 403, 502, etc.)
 * The remaining three digits are just an increasing integer.
 * If it is 7 digits and starts with a 2, it is locus.
 *
 * @param errorCode
 * @returns {boolean}
 */
var isLocusServiceErrorCode = exports.isLocusServiceErrorCode = function isLocusServiceErrorCode(errorCode) {
  var code = "".concat(errorCode);
  if (code.length === 7 && code.charAt(0) === '2') {
    return true;
  }
  return false;
};

/**
 * MeetingInfo errors sometimes has body.data.meetingInfo object
 * MeetingInfo errors come with a wbxappapi url
 *
 * @param {Object} rawError
 * @returns {boolean}
 */
var isMeetingInfoServiceError = exports.isMeetingInfoServiceError = function isMeetingInfoServiceError(rawError) {
  var _rawError$body, _rawError$body$data, _rawError$body2, _rawError$body2$url;
  if ((_rawError$body = rawError.body) !== null && _rawError$body !== void 0 && (_rawError$body$data = _rawError$body.data) !== null && _rawError$body$data !== void 0 && _rawError$body$data.meetingInfo || (_rawError$body2 = rawError.body) !== null && _rawError$body2 !== void 0 && (_rawError$body2$url = _rawError$body2.url) !== null && _rawError$body2$url !== void 0 && _rawError$body2$url.includes(_config.WBX_APP_API_URL)) {
    return true;
  }
  return false;
};

/**
 * Returns true if the raw error is a network related error
 *
 * @param {Object} rawError
 * @returns {boolean}
 */
var isNetworkError = exports.isNetworkError = function isNetworkError(rawError) {
  if (rawError instanceof _webexCore.WebexHttpError.NetworkOrCORSError) {
    return true;
  }
  return false;
};

/**
 * Returns true if the error is an unauthorized error
 *
 * @param {Object} rawError
 * @returns {boolean}
 */
var isUnauthorizedError = exports.isUnauthorizedError = function isUnauthorizedError(rawError) {
  if (rawError instanceof _webexCore.WebexHttpError.Unauthorized) {
    return true;
  }
  return false;
};

/**
 * Returns true if the error is an SdpOfferCreation error
 *
 * @param {Object} rawError
 * @returns {boolean}
 */
var isSdpOfferCreationError = exports.isSdpOfferCreationError = function isSdpOfferCreationError(rawError) {
  // would LIKE to do rawError instanceof Errors.SdpOfferCreationError
  // but including internal-media-core in plugin-metrics breaks meetings and metrics unit tests
  if (rawError.name === _config.ERROR_DESCRIPTIONS.SDP_OFFER_CREATION_ERROR) {
    return true;
  }
  return false;
};

/**
 * MDN Media Devices getUserMedia() method returns a name if it errs
 * Documentation can be found here: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
 *
 * @param errorCode
 * @returns
 */
var isBrowserMediaErrorName = exports.isBrowserMediaErrorName = function isBrowserMediaErrorName(errorName) {
  if (_config.BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP[errorName]) {
    return true;
  }
  return false;
};

/**
 * @param webClientDomain
 * @returns
 */
var getBuildType = exports.getBuildType = function getBuildType(webClientDomain) {
  var markAsTestEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  // used temporary to test pre join in production without creating noise data, SPARK-468456
  if (markAsTestEvent) {
    return 'test';
  }
  if (webClientDomain !== null && webClientDomain !== void 0 && webClientDomain.includes('localhost') || webClientDomain !== null && webClientDomain !== void 0 && webClientDomain.includes('127.0.0.1') || process.env.NODE_ENV !== 'production') {
    return 'test';
  }
  return 'prod';
};

/**
 * Prepare metric item for submission.
 * @param {Object} webex sdk instance
 * @param {Object} item
 * @returns {Object} prepared item
 */
var prepareDiagnosticMetricItem = exports.prepareDiagnosticMetricItem = function prepareDiagnosticMetricItem(webex, item) {
  var _item$eventPayload, _item$eventPayload$ev, _item$eventPayload$ev2, _item$eventPayload2, _item$eventPayload2$e, _item$eventPayload2$e2, _item$eventPayload3, _item$eventPayload3$e;
  var origin = {
    buildType: exports.getBuildType((_item$eventPayload = item.eventPayload) === null || _item$eventPayload === void 0 ? void 0 : (_item$eventPayload$ev = _item$eventPayload.event) === null || _item$eventPayload$ev === void 0 ? void 0 : (_item$eventPayload$ev2 = _item$eventPayload$ev.eventData) === null || _item$eventPayload$ev2 === void 0 ? void 0 : _item$eventPayload$ev2.webClientDomain, (_item$eventPayload2 = item.eventPayload) === null || _item$eventPayload2 === void 0 ? void 0 : (_item$eventPayload2$e = _item$eventPayload2.event) === null || _item$eventPayload2$e === void 0 ? void 0 : (_item$eventPayload2$e2 = _item$eventPayload2$e.eventData) === null || _item$eventPayload2$e2 === void 0 ? void 0 : _item$eventPayload2$e2.markAsTestEvent),
    networkType: 'unknown'
  };

  // check event names and append latencies?
  var eventName = (_item$eventPayload3 = item.eventPayload) === null || _item$eventPayload3 === void 0 ? void 0 : (_item$eventPayload3$e = _item$eventPayload3.event) === null || _item$eventPayload3$e === void 0 ? void 0 : _item$eventPayload3$e.name;
  var joinTimes = {};
  var audioSetupDelay = {};
  var videoSetupDelay = {};
  var cdl = webex.internal.newMetrics.callDiagnosticLatencies;
  switch (eventName) {
    case 'client.webexapp.launched':
      joinTimes.downloadTime = cdl.getDownloadTimeJMT();
      break;
    case 'client.login.end':
      joinTimes.otherAppApiReqResp = cdl.getOtherAppApiReqResp();
      joinTimes.exchangeCITokenJMT = cdl.getExchangeCITokenJMT();
      break;
    case 'client.interstitial-window.launched':
      joinTimes.meetingInfoReqResp = cdl.getMeetingInfoReqResp();
      joinTimes.clickToInterstitial = cdl.getClickToInterstitial();
      joinTimes.refreshCaptchaServiceReqResp = cdl.getRefreshCaptchaReqResp();
      joinTimes.downloadIntelligenceModelsReqResp = cdl.getDownloadIntelligenceModelsReqResp();
      break;
    case 'client.call.initiated':
      joinTimes.meetingInfoReqResp = cdl.getMeetingInfoReqResp();
      joinTimes.showInterstitialTime = cdl.getShowInterstitialTime();
      joinTimes.registerWDMDeviceJMT = cdl.getRegisterWDMDeviceJMT();
      joinTimes.getU2CTime = cdl.getU2CTime();
      joinTimes.getReachabilityClustersReqResp = cdl.getReachabilityClustersReqResp();
      break;
    case 'client.locus.join.response':
      joinTimes.meetingInfoReqResp = cdl.getMeetingInfoReqResp();
      joinTimes.callInitJoinReq = cdl.getCallInitJoinReq();
      joinTimes.joinReqResp = cdl.getJoinReqResp();
      joinTimes.pageJmt = cdl.getPageJMT();
      joinTimes.clickToInterstitial = cdl.getClickToInterstitial();
      joinTimes.interstitialToJoinOK = cdl.getInterstitialToJoinOK();
      joinTimes.totalJmt = cdl.getTotalJMT();
      joinTimes.clientJmt = cdl.getClientJMT();
      joinTimes.downloadTime = cdl.getDownloadTimeJMT();
      break;
    case 'client.ice.end':
      joinTimes.ICESetupTime = cdl.getICESetupTime();
      joinTimes.audioICESetupTime = cdl.getAudioICESetupTime();
      joinTimes.videoICESetupTime = cdl.getVideoICESetupTime();
      joinTimes.shareICESetupTime = cdl.getShareICESetupTime();
      break;
    case 'client.media.rx.start':
      joinTimes.localSDPGenRemoteSDPRecv = cdl.getLocalSDPGenRemoteSDPRecv();
      break;
    case 'client.media-engine.ready':
      joinTimes.totalMediaJMT = cdl.getTotalMediaJMT();
      joinTimes.interstitialToMediaOKJMT = cdl.getInterstitialToMediaOKJMT();
      joinTimes.callInitMediaEngineReady = cdl.getCallInitMediaEngineReady();
      joinTimes.stayLobbyTime = cdl.getStayLobbyTime();
      break;
    case 'client.mediaquality.event':
      audioSetupDelay.joinRespRxStart = cdl.getAudioJoinRespRxStart();
      audioSetupDelay.joinRespTxStart = cdl.getAudioJoinRespTxStart();
      videoSetupDelay.joinRespRxStart = cdl.getVideoJoinRespRxStart();
      videoSetupDelay.joinRespTxStart = cdl.getVideoJoinRespTxStart();
  }
  if (!(0, _lodash.isEmpty)(joinTimes)) {
    item.eventPayload.event = (0, _lodash.merge)(item.eventPayload.event, {
      joinTimes: joinTimes
    });
  }
  if (!(0, _lodash.isEmpty)(audioSetupDelay)) {
    item.eventPayload.event = (0, _lodash.merge)(item.eventPayload.event, {
      audioSetupDelay: audioSetupDelay
    });
  }
  if (!(0, _lodash.isEmpty)(videoSetupDelay)) {
    item.eventPayload.event = (0, _lodash.merge)(item.eventPayload.event, {
      videoSetupDelay: videoSetupDelay
    });
  }
  item.eventPayload.origin = (0, _assign.default)(origin, item.eventPayload.origin);

  // @ts-ignore
  webex.logger.log("CallDiagnosticLatencies,prepareDiagnosticMetricItem: ".concat((0, _stringify.default)({
    latencies: Object.fromEntries(cdl.latencyTimestamps),
    event: item
  })));
  return item;
};

/**
 * Sets the originTime value(s) before the request/fetch.
 * This function is only useful if you are about to submit a metrics
 * request using pre-built fetch options;
 *
 * @param {any} options
 * @returns {any} the updated options object
 */
var setMetricTimings = exports.setMetricTimings = function setMetricTimings(options) {
  if (options.body && options.json) {
    var _body$metrics;
    var body = JSON.parse(options.body);
    var now = new Date().toISOString();
    (_body$metrics = body.metrics) === null || _body$metrics === void 0 ? void 0 : _body$metrics.forEach(function (metric) {
      if (metric.eventPayload) {
        // The event will effectively be triggered and sent at the same time.
        // The existing triggered time is from when the options were built.
        metric.eventPayload.originTime = {
          triggered: now,
          sent: now
        };
      }
    });
    options.body = (0, _stringify.default)(body);
  }
  return options;
};
var extractVersionMetadata = exports.extractVersionMetadata = function extractVersionMetadata(version) {
  // extract major and minor version
  var _version$split = version.split('.'),
    _version$split2 = (0, _slicedToArray2.default)(_version$split, 2),
    majorVersion = _version$split2[0],
    minorVersion = _version$split2[1];
  return {
    majorVersion: (0, _parseInt2.default)(majorVersion, 10),
    minorVersion: (0, _parseInt2.default)(minorVersion, 10)
  };
};

/**
 * Generates client error codes for specific ice failures
 * that happen when trying to add media in a meeting.
 */
var generateClientErrorCodeForIceFailure = exports.generateClientErrorCodeForIceFailure = function generateClientErrorCodeForIceFailure(_ref2) {
  var signalingState = _ref2.signalingState,
    iceConnectionState = _ref2.iceConnectionState,
    turnServerUsed = _ref2.turnServerUsed;
  var errorCode = _config.ICE_FAILURE_CLIENT_CODE; // default;

  if (signalingState === 'have-local-offer') {
    errorCode = _config.MISSING_ROAP_ANSWER_CLIENT_CODE;
  }
  if (signalingState === 'stable' && (iceConnectionState === 'connected' || iceConnectionState === 'disconnected')) {
    errorCode = _config.DTLS_HANDSHAKE_FAILED_CLIENT_CODE;
  }
  if (signalingState !== 'have-local-offer' && iceConnectionState !== 'connected' && iceConnectionState !== 'disconnected') {
    if (turnServerUsed) {
      errorCode = _config.ICE_FAILED_WITH_TURN_TLS_CLIENT_CODE;
    } else {
      errorCode = _config.ICE_FAILED_WITHOUT_TURN_TLS_CLIENT_CODE;
    }
  }
  return errorCode;
};
//# sourceMappingURL=call-diagnostic-metrics.util.js.map
