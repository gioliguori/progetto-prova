{"version":3,"names":["_common","require","_uuid","_interopRequireDefault","_lodash","_webexCore","_metrics","_callDiagnosticMetrics","_config","_callDiagnosticMetricsBatcher","_preloginMetricsBatcher","_config2","ownKeys","e","r","t","_Object$keys","_Object$getOwnPropertySymbols","o","filter","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","Object","forEach","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","_Reflect$construct","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","_BrowserDetection","BrowserDetection","getOSVersion","getBrowserName","getBrowserVersion","CallDiagnosticMetrics","exports","_StatelessWebexPlugin","_inherits2","_super","_this","_classCallCheck2","_len","args","Array","_key","concat","_assertThisInitialized2","options","_promise","resolve","event","valid","preLoginId","finalEvent","eventPayload","type","preLoginMetricsBatcher","savePreLoginId","request","logger","webex","callDiagnosticEventsBatcher","CallDiagnosticEventsBatcher","parent","PreLoginMetricsBatcher","_createClass2","key","value","getCurLoginType","canAuthorize","credentials","isUnverifiedGuest","getIsConvergedArchitectureEnabled","_ref","meetingId","_meeting$meetingInfo","meeting","meetings","meetingCollection","get","meetingInfo","enableConvergedArchitecture","undefined","getSubServiceType","webexScheduled","enableEvent","pmr","WEBEX_SUB_SERVICE_TYPES","PMR","SCHEDULED_MEETING","WEBINAR","getOrigin","_this$webex$meetings$","_this$webex$meetings$2","_this$webex$meetings$3","_this$webex$meetings$4","_this$webex$meetings$5","_this$webex$meetings$6","defaultClientType","config","metrics","clientType","defaultSubClientType","subClientType","providedClientVersion","clientVersion","defaultSDKClientVersion","CLIENT_NAME","version","versionMetadata","extractVersionMetadata","hasLoggedBrowserSerial","log","CALL_DIAGNOSTIC_LOG_IDENTIFIER","_stringify","getBrowserSerial","_this$webex$meetings","_this$webex$meetings$7","_this$webex$meetings$8","_this$webex$meetings$9","_this$webex$meetings$10","_this$webex$meetings$11","origin","name","networkType","userAgent","userAgentToString","clientName","webexVersion","clientInfo","publicNetworkPrefix","anonymizeIPAddress","geoHintInfo","clientAddress","localNetworkPrefix","statsAnalyzer","getLocalIpAddress","osVersion","os","getOSNameInternal","browser","browserVersion","environment","newEnvironment","clientLaunchMethod","browserLaunchMethod","Error","getIdentifiers","_meeting$locusInfo","_meeting$meetingInfo2","_meeting$meetingInfo3","_meeting$meetingInfo6","_meeting$meetingInfo8","mediaConnections","correlationId","webexConferenceIdStr","globalMeetingId","identifiers","device","_ref2","installationId","userId","deviceId","url","orgId","locusUrl","internal","services","machineId","locusInfo","fullState","locusId","split","pop","locusStartTime","lastActive","confIdStr","confID","_meeting$meetingInfo4","_meeting$meetingInfo5","_meeting$meetingInfo7","siteName","_meeting$meetingInfo9","webexSiteName","_mediaConnections$","_mediaConnections$2","mediaAgentAlias","mediaAgentGroupId","prepareDiagnosticEvent","eventData","_this$webex$meetings$12","eventId","uuid","v4","originTime","triggered","Date","toISOString","sent","senderCountryCode","countryCode","clearEmptyKeysRecursively","submitFeatureEvent","submitMQE","_ref3","payload","console","warn","submitClientMetrics","CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND","fields","clientEventObject","canProceed","webClientDomain","window","location","hostname","intervals","callingServiceType","sourceMetadata","applicationSoftwareType","applicationSoftwareVersion","mediaEngineSoftwareType","mediaEngineSoftwareVersion","startTime","merge","diagnosticEvent","validator","submitToCallDiagnostics","getErrorPayloadForClientErrorCode","_ref4","clientErrorCode","serviceErrorCode","serviceErrorName","rawErrorMessage","payloadOverrides","httpStatusCode","error","partialParsedError","CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD","fatal","shownToUser","category","errorCode","errorData","errorName","generateClientEventErrorPayload","rawError","_rawError$error","_rawError$error$body","_rawError$body","_rawError$body2","_rawError$body3","_rawError$body3$reaso","message","statusCode","isBrowserMediaErrorName","BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP","isSdpOfferCreationError","_rawError$cause","causeType","cause","SDP_OFFER_CREATION_ERROR_MAP","GENERAL","body","code","reason","reasonCode","SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP","isLocusServiceErrorCode","NEW_LOCUS_ERROR_CLIENT_CODE","isMeetingInfoServiceError","MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE","isNetworkError","NETWORK_ERROR","isUnauthorizedError","AUTHENTICATION_FAILED_CODE","UNKNOWN_ERROR","createClientEventObjectInMeeting","_ref5","errors","userType","getCurUserType","loginType","callStateForMetrics","isConvergedArchitectureEnabled","webexSubServiceType","createClientEventObjectPreMeeting","_ref6","prepareClientEvent","_ref7","generatedError","submitClientEvent","_ref8","submitToCallDiagnosticsPreLogin","_buildClientEventFetchRequestOptions","_asyncToGenerator2","_regenerator","mark","_callee","_ref9","clientEvent","wrap","_callee$","_context","prev","next","prepareDiagnosticMetricItem","method","service","resource","headers","waitForServiceTimeout","authorization","abrupt","prepareFetchOptions","stop","buildClientEventFetchRequestOptions","_x","isServiceErrorExpected","clientErrorPayload","setDeviceInfo","StatelessWebexPlugin"],"sources":["call-diagnostic-metrics.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable valid-jsdoc */\nimport {BrowserDetection, getBrowserSerial} from '@webex/common';\nimport uuid from 'uuid';\nimport {merge} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\nimport {getOSNameInternal} from '../metrics';\n\nimport {\n  anonymizeIPAddress,\n  clearEmptyKeysRecursively,\n  isLocusServiceErrorCode,\n  prepareDiagnosticMetricItem,\n  userAgentToString,\n  extractVersionMetadata,\n  isMeetingInfoServiceError,\n  isBrowserMediaErrorName,\n  isNetworkError,\n  isUnauthorizedError,\n  isSdpOfferCreationError,\n} from './call-diagnostic-metrics.util';\nimport {CLIENT_NAME} from '../config';\nimport {\n  Event,\n  ClientType,\n  SubClientType,\n  NetworkType,\n  EnvironmentType,\n  NewEnvironmentType,\n  ClientEvent,\n  SubmitClientEventOptions,\n  MediaQualityEvent,\n  SubmitMQEOptions,\n  SubmitMQEPayload,\n  ClientLaunchMethodType,\n  ClientEventError,\n  ClientEventPayload,\n  ClientInfo,\n  ClientEventPayloadError,\n  ClientSubServiceType,\n  BrowserLaunchMethodType,\n} from '../metrics.types';\nimport CallDiagnosticEventsBatcher from './call-diagnostic-metrics-batcher';\nimport PreLoginMetricsBatcher from '../prelogin-metrics-batcher';\n\nimport {\n  CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD,\n  CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND,\n  NEW_LOCUS_ERROR_CLIENT_CODE,\n  SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP,\n  UNKNOWN_ERROR,\n  BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP,\n  MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE,\n  CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n  NETWORK_ERROR,\n  AUTHENTICATION_FAILED_CODE,\n  WEBEX_SUB_SERVICE_TYPES,\n  SDP_OFFER_CREATION_ERROR_MAP,\n} from './config';\n\nconst {getOSVersion, getBrowserName, getBrowserVersion} = BrowserDetection();\n\ntype GetOriginOptions = {\n  clientType: ClientType;\n  subClientType: SubClientType;\n  networkType?: NetworkType;\n  clientLaunchMethod?: ClientLaunchMethodType;\n  browserLaunchMethod?: BrowserLaunchMethodType;\n  environment?: EnvironmentType;\n  newEnvironment?: NewEnvironmentType;\n};\n\ntype GetIdentifiersOptions = {\n  meeting?: any;\n  mediaConnections?: any[];\n  correlationId?: string;\n  preLoginId?: string;\n  globalMeetingId?: string;\n  webexConferenceIdStr?: string;\n};\n\n/**\n * @description Util class to handle Call Analyzer Metrics\n * @export\n * @class CallDiagnosticMetrics\n */\nexport default class CallDiagnosticMetrics extends StatelessWebexPlugin {\n  // @ts-ignore\n  private callDiagnosticEventsBatcher: CallDiagnosticEventsBatcher;\n  // @ts-ignore\n  private preLoginMetricsBatcher: PreLoginMetricsBatcher;\n\n  private logger: any; // to avoid adding @ts-ignore everywhere\n  private hasLoggedBrowserSerial: boolean;\n  private device: any;\n\n  // the default validator before piping an event to the batcher\n  // this function can be overridden by the user\n  public validator: (options: {\n    type: 'mqe' | 'ce';\n    event: Event;\n  }) => Promise<{event: Event; valid: boolean}> = (options: {type: 'mqe' | 'ce'; event: Event}) =>\n    Promise.resolve({event: options?.event, valid: true});\n\n  /**\n   * Constructor\n   * @param args\n   */\n  constructor(...args) {\n    super(...args);\n    // @ts-ignore\n    this.logger = this.webex.logger;\n    // @ts-ignore\n    this.callDiagnosticEventsBatcher = new CallDiagnosticEventsBatcher({}, {parent: this.webex});\n    // @ts-ignore\n    this.preLoginMetricsBatcher = new PreLoginMetricsBatcher({}, {parent: this.webex});\n  }\n\n  /**\n   * Returns the login type of the current user\n   * @returns one of 'login-ci','unverified-guest', null\n   */\n  getCurLoginType() {\n    // @ts-ignore\n    if (this.webex.canAuthorize) {\n      // @ts-ignore\n      return this.webex.credentials.isUnverifiedGuest ? 'unverified-guest' : 'login-ci';\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns if the meeting has converged architecture enabled\n   * @param options.meetingId\n   */\n  getIsConvergedArchitectureEnabled({meetingId}: {meetingId?: string}): boolean {\n    if (meetingId) {\n      // @ts-ignore\n      const meeting = this.webex.meetings.meetingCollection.get(meetingId);\n\n      return meeting?.meetingInfo?.enableConvergedArchitecture;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Returns meeting's subServiceType\n   * @param meeting\n   * @returns\n   */\n  getSubServiceType(meeting?: any): ClientSubServiceType {\n    if (meeting) {\n      // @ts-ignore\n      const meetingInfo = meeting?.meetingInfo;\n      // if not Scheduled, not Webinar, pmr - then pmr\n      if (!meetingInfo?.webexScheduled && !meetingInfo?.enableEvent && meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.PMR;\n      }\n      // if Scheduled, not Webinar, not pmr - then ScheduledMeeting\n      if (meetingInfo?.webexScheduled && !meetingInfo?.enableEvent && !meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.SCHEDULED_MEETING;\n      }\n      // if Scheduled, Webinar, not pmr - then Webinar\n      if (meetingInfo?.webexScheduled && meetingInfo?.enableEvent && !meetingInfo?.pmr) {\n        return WEBEX_SUB_SERVICE_TYPES.WEBINAR;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get origin object for Call Diagnostic Event payload.\n   * @param options\n   * @param meetingId\n   * @returns\n   */\n  getOrigin(options: GetOriginOptions, meetingId?: string) {\n    const defaultClientType: ClientType =\n      // @ts-ignore\n      this.webex.meetings.config?.metrics?.clientType;\n    const defaultSubClientType: SubClientType =\n      // @ts-ignore\n      this.webex.meetings.config?.metrics?.subClientType;\n    // @ts-ignore\n    const providedClientVersion: string = this.webex.meetings.config?.metrics?.clientVersion;\n    // @ts-ignore\n    const defaultSDKClientVersion = `${CLIENT_NAME}/${this.webex.version}`;\n\n    let versionMetadata: Pick<ClientInfo, 'majorVersion' | 'minorVersion'> = {};\n\n    // sdk version split doesn't really make sense for now...\n    if (providedClientVersion) {\n      versionMetadata = extractVersionMetadata(providedClientVersion);\n    }\n\n    if (!this.hasLoggedBrowserSerial) {\n      this.logger.log(\n        CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n        `CallDiagnosticMetrics: @createClientEventObjectInMeeting => collected browser data`,\n        JSON.stringify(getBrowserSerial())\n      );\n\n      this.hasLoggedBrowserSerial = true;\n    }\n\n    if (\n      (defaultClientType && defaultSubClientType) ||\n      (options.clientType && options.subClientType)\n    ) {\n      const origin: Event['origin'] = {\n        name: 'endpoint',\n        networkType: options?.networkType || 'unknown',\n        userAgent: userAgentToString({\n          // @ts-ignore\n          clientName: this.webex.meetings?.config?.metrics?.clientName,\n          // @ts-ignore\n          webexVersion: this.webex.version,\n        }),\n        clientInfo: {\n          clientType: options?.clientType || defaultClientType,\n          clientVersion: providedClientVersion || defaultSDKClientVersion,\n          ...versionMetadata,\n          publicNetworkPrefix:\n            // @ts-ignore\n            anonymizeIPAddress(this.webex.meetings.geoHintInfo?.clientAddress) || undefined,\n          localNetworkPrefix:\n            anonymizeIPAddress(\n              // @ts-ignore\n              this.webex.meetings.meetingCollection\n                .get(meetingId)\n                ?.statsAnalyzer?.getLocalIpAddress()\n            ) || undefined,\n          osVersion: getOSVersion() || 'unknown',\n          subClientType: options?.subClientType || defaultSubClientType,\n          os: getOSNameInternal(),\n          browser: getBrowserName(),\n          browserVersion: getBrowserVersion(),\n        },\n      };\n\n      if (meetingId) {\n        // @ts-ignore\n        const meeting = this.webex.meetings.meetingCollection.get(meetingId);\n        if (meeting?.environment) {\n          origin.environment = meeting.environment;\n        }\n      }\n\n      if (options?.environment) {\n        origin.environment = options.environment;\n      }\n\n      if (options?.newEnvironment) {\n        origin.newEnvironment = options.newEnvironment;\n      }\n\n      if (options?.clientLaunchMethod) {\n        origin.clientInfo.clientLaunchMethod = options.clientLaunchMethod;\n      }\n\n      if (options?.browserLaunchMethod) {\n        origin.clientInfo.browserLaunchMethod = options.browserLaunchMethod;\n      }\n\n      return origin;\n    }\n\n    throw new Error(\"ClientType and SubClientType can't be undefined\");\n  }\n\n  /**\n   * Gather identifier details for call diagnostic payload.\n   * @throws Error if initialization fails.\n   * @param options\n   */\n  getIdentifiers(options: GetIdentifiersOptions) {\n    const {\n      meeting,\n      mediaConnections,\n      correlationId,\n      webexConferenceIdStr,\n      globalMeetingId,\n      preLoginId,\n    } = options;\n    const identifiers: Event['event']['identifiers'] = {\n      correlationId: 'unknown',\n    };\n\n    if (meeting) {\n      identifiers.correlationId = meeting.correlationId;\n    }\n\n    if (correlationId) {\n      identifiers.correlationId = correlationId;\n    }\n\n    if (this.device) {\n      const {device} = this;\n      const {installationId} = device?.config || {};\n\n      identifiers.userId = device?.userId || preLoginId;\n      identifiers.deviceId = device?.url;\n      identifiers.orgId = device?.orgId;\n      // @ts-ignore\n      identifiers.locusUrl = this.webex.internal.services.get('locus');\n\n      if (installationId) {\n        identifiers.machineId = installationId;\n      }\n    }\n\n    if (meeting?.locusInfo?.fullState) {\n      identifiers.locusUrl = meeting.locusUrl;\n      identifiers.locusId = meeting.locusUrl && meeting.locusUrl.split('/').pop();\n      identifiers.locusStartTime =\n        meeting.locusInfo.fullState && meeting.locusInfo.fullState.lastActive;\n    }\n\n    if (meeting?.meetingInfo?.confIdStr || meeting?.meetingInfo?.confID) {\n      identifiers.webexConferenceIdStr = `${\n        meeting.meetingInfo?.confIdStr || meeting.meetingInfo?.confID\n      }`;\n    }\n\n    if (meeting?.meetingInfo?.meetingId) {\n      identifiers.globalMeetingId = meeting.meetingInfo?.meetingId;\n    }\n\n    if (meeting?.meetingInfo?.siteName) {\n      identifiers.webexSiteName = meeting.meetingInfo?.siteName;\n    }\n\n    if (mediaConnections) {\n      identifiers.mediaAgentAlias = mediaConnections?.[0]?.mediaAgentAlias;\n      identifiers.mediaAgentGroupId = mediaConnections?.[0]?.mediaAgentGroupId;\n    }\n\n    if (!identifiers?.webexConferenceIdStr && webexConferenceIdStr) {\n      identifiers.webexConferenceIdStr = `${webexConferenceIdStr}`;\n    }\n\n    if (!identifiers?.globalMeetingId && globalMeetingId) {\n      identifiers.globalMeetingId = globalMeetingId;\n    }\n\n    if (identifiers.correlationId === undefined) {\n      throw new Error('Identifiers initialization failed.');\n    }\n\n    return identifiers;\n  }\n\n  /**\n   * Create diagnostic event, which can hold client event, feature event or MQE event data.\n   * This just initiates the shared properties that are required for all the 3 event categories.\n   * @param eventData\n   * @param options\n   * @returns\n   */\n  prepareDiagnosticEvent(eventData: Event['event'], options: any) {\n    const {meetingId} = options;\n    const origin = this.getOrigin(options, meetingId);\n\n    const event: Event = {\n      eventId: uuid.v4(),\n      version: 1,\n      origin,\n      originTime: {\n        triggered: new Date().toISOString(),\n        // is overridden in prepareRequest batcher\n        sent: 'not_defined_yet',\n      },\n      // @ts-ignore\n      senderCountryCode: this.webex.meetings.geoHintInfo?.countryCode,\n      event: eventData,\n    };\n\n    // sanitize (remove empty properties, CA requires it)\n    // but we don't want to sanitize MQE as most of the times\n    // values will be 0, [] etc, and they are required.\n    if (eventData.name !== 'client.mediaquality.event') {\n      clearEmptyKeysRecursively(event);\n    }\n\n    return event;\n  }\n\n  /**\n   * TODO: NOT IMPLEMENTED\n   * Submit Feature Event\n   * @returns\n   */\n  public submitFeatureEvent() {\n    throw Error('Not implemented');\n  }\n\n  /**\n   * Submit Media Quality Event\n   * @param args - submit params\n   * @param arg.name - event key\n   * @param arg.payload - additional payload to be merge with the default payload\n   * @param arg.options - options\n   */\n  submitMQE({\n    name,\n    payload,\n    options,\n  }: {\n    name: MediaQualityEvent['name'];\n    payload: SubmitMQEPayload;\n    options: SubmitMQEOptions;\n  }) {\n    const {meetingId, mediaConnections, webexConferenceIdStr, globalMeetingId} = options;\n\n    // events that will most likely happen in join phase\n    if (meetingId) {\n      // @ts-ignore\n      const meeting = this.webex.meetings.meetingCollection.get(meetingId);\n\n      if (!meeting) {\n        console.warn(\n          'Attempt to send MQE but no meeting was found...',\n          `event: ${name}, meetingId: ${meetingId}`\n        );\n        // @ts-ignore\n        this.webex.internal.metrics.submitClientMetrics(CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND, {\n          fields: {\n            meetingId,\n            name,\n          },\n        });\n\n        return;\n      }\n\n      // merge identifiers\n      const identifiers = this.getIdentifiers({\n        meeting,\n        mediaConnections: meeting.mediaConnections || mediaConnections,\n        webexConferenceIdStr,\n        globalMeetingId,\n      });\n\n      // create media quality event object\n      let clientEventObject: MediaQualityEvent['payload'] = {\n        name,\n        canProceed: true,\n        identifiers,\n        eventData: {\n          webClientDomain: window.location.hostname,\n        },\n        intervals: payload.intervals,\n        callingServiceType: 'LOCUS',\n        sourceMetadata: {\n          applicationSoftwareType: CLIENT_NAME,\n          // @ts-ignore\n          applicationSoftwareVersion: this.webex.version,\n          mediaEngineSoftwareType: getBrowserName() || 'browser',\n          mediaEngineSoftwareVersion: getOSVersion() || 'unknown',\n          startTime: new Date().toISOString(),\n        },\n      };\n\n      // merge any new properties, or override existing ones\n      clientEventObject = merge(clientEventObject, payload);\n\n      // append media quality event data to the call diagnostic event\n      const diagnosticEvent = this.prepareDiagnosticEvent(clientEventObject, options);\n      this.validator({type: 'mqe', event: diagnosticEvent});\n      this.submitToCallDiagnostics(diagnosticEvent);\n    } else {\n      throw new Error(\n        'Media quality events cant be sent outside the context of a meeting. Meeting id is required.'\n      );\n    }\n  }\n\n  /**\n   * Return Client Event payload by client error code\n   * @param arg - get error arg\n   * @param arg.clientErrorCode\n   * @param arg.serviceErrorCode\n   * @param arg.payloadOverrides\n   * @param arg.httpStatusCode\n   * @returns\n   */\n  public getErrorPayloadForClientErrorCode({\n    clientErrorCode,\n    serviceErrorCode,\n    serviceErrorName,\n    rawErrorMessage,\n    payloadOverrides,\n    httpStatusCode,\n  }: {\n    clientErrorCode: number;\n    serviceErrorCode: any;\n    serviceErrorName?: any;\n    rawErrorMessage?: string;\n    payloadOverrides?: any;\n    httpStatusCode?: number;\n  }): ClientEventError {\n    let error: ClientEventError;\n\n    if (clientErrorCode) {\n      const partialParsedError = CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD[clientErrorCode];\n\n      if (partialParsedError) {\n        error = merge(\n          {fatal: true, shownToUser: false, name: 'other', category: 'other'}, // default values\n          {errorCode: clientErrorCode},\n          serviceErrorName ? {errorData: {errorName: serviceErrorName}} : {},\n          {serviceErrorCode},\n          {rawErrorMessage},\n          httpStatusCode === undefined ? {} : {httpStatusCode},\n          partialParsedError,\n          payloadOverrides || {}\n        );\n\n        return error;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Generate error payload for Client Event\n   * @param rawError\n   */\n  generateClientEventErrorPayload(rawError: any) {\n    const rawErrorMessage = rawError.message;\n    const httpStatusCode = rawError.statusCode;\n    if (rawError.name) {\n      if (isBrowserMediaErrorName(rawError.name)) {\n        return this.getErrorPayloadForClientErrorCode({\n          serviceErrorCode: undefined,\n          clientErrorCode: BROWSER_MEDIA_ERROR_NAME_TO_CLIENT_ERROR_CODES_MAP[rawError.name],\n          serviceErrorName: rawError.name,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n    }\n\n    if (isSdpOfferCreationError(rawError)) {\n      // error code is 30005, but that's not specific enough. we also need to check error.cause.type\n      const causeType = rawError.cause?.type;\n\n      return this.getErrorPayloadForClientErrorCode({\n        serviceErrorCode: undefined,\n        clientErrorCode:\n          SDP_OFFER_CREATION_ERROR_MAP[causeType] || SDP_OFFER_CREATION_ERROR_MAP.GENERAL,\n        serviceErrorName: rawError.name,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    const serviceErrorCode =\n      rawError?.error?.body?.errorCode ||\n      rawError?.body?.errorCode ||\n      rawError?.body?.code ||\n      rawError?.body?.reason?.reasonCode;\n\n    if (serviceErrorCode) {\n      const clientErrorCode = SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP[serviceErrorCode];\n      if (clientErrorCode) {\n        return this.getErrorPayloadForClientErrorCode({\n          clientErrorCode,\n          serviceErrorCode,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n\n      // by default, if it is locus error, return new locus err\n      if (isLocusServiceErrorCode(serviceErrorCode)) {\n        return this.getErrorPayloadForClientErrorCode({\n          clientErrorCode: NEW_LOCUS_ERROR_CLIENT_CODE,\n          serviceErrorCode,\n          rawErrorMessage,\n          httpStatusCode,\n        });\n      }\n    }\n\n    if (isMeetingInfoServiceError(rawError)) {\n      return this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: MEETING_INFO_LOOKUP_ERROR_CLIENT_CODE,\n        serviceErrorCode,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    if (isNetworkError(rawError)) {\n      return this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: NETWORK_ERROR,\n        serviceErrorCode,\n        payloadOverrides: rawError.payloadOverrides,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    if (isUnauthorizedError(rawError)) {\n      return this.getErrorPayloadForClientErrorCode({\n        clientErrorCode: AUTHENTICATION_FAILED_CODE,\n        serviceErrorCode,\n        payloadOverrides: rawError.payloadOverrides,\n        rawErrorMessage,\n        httpStatusCode,\n      });\n    }\n\n    // otherwise return unkown error\n    return this.getErrorPayloadForClientErrorCode({\n      clientErrorCode: UNKNOWN_ERROR,\n      serviceErrorCode: UNKNOWN_ERROR,\n      payloadOverrides: rawError.payloadOverrides,\n      rawErrorMessage,\n      httpStatusCode,\n    });\n  }\n\n  /**\n   * Create client event object for in meeting events\n   * @param arg - create args\n   * @param arg.event - event key\n   * @param arg.options - options\n   * @returns object\n   */\n  private createClientEventObjectInMeeting({\n    name,\n    options,\n    errors,\n  }: {\n    name: ClientEvent['name'];\n    options?: SubmitClientEventOptions;\n    errors?: ClientEventPayloadError;\n  }) {\n    const {meetingId, mediaConnections, globalMeetingId, webexConferenceIdStr} = options;\n\n    // @ts-ignore\n    const meeting = this.webex.meetings.meetingCollection.get(meetingId);\n\n    if (!meeting) {\n      console.warn(\n        'Attempt to send client event but no meeting was found...',\n        `name: ${name}, meetingId: ${meetingId}`\n      );\n      // @ts-ignore\n      this.webex.internal.metrics.submitClientMetrics(CALL_DIAGNOSTIC_EVENT_FAILED_TO_SEND, {\n        fields: {\n          meetingId,\n          name,\n        },\n      });\n\n      return undefined;\n    }\n\n    // grab identifiers\n    const identifiers = this.getIdentifiers({\n      meeting,\n      mediaConnections: meeting?.mediaConnections || mediaConnections,\n      webexConferenceIdStr,\n      globalMeetingId,\n    });\n\n    // create client event object\n    const clientEventObject: ClientEvent['payload'] = {\n      name,\n      canProceed: true,\n      identifiers,\n      errors,\n      eventData: {\n        webClientDomain: window.location.hostname,\n      },\n      userType: meeting.getCurUserType(),\n      loginType:\n        'loginType' in meeting.callStateForMetrics\n          ? meeting.callStateForMetrics.loginType\n          : this.getCurLoginType(),\n      isConvergedArchitectureEnabled: this.getIsConvergedArchitectureEnabled({\n        meetingId,\n      }),\n      webexSubServiceType: this.getSubServiceType(meeting),\n    };\n\n    return clientEventObject;\n  }\n\n  /**\n   * Create client event object for pre meeting events\n   * @param arg - create args\n   * @param arg.event - event key\n   * @param arg.options - payload\n   * @returns object\n   */\n  private createClientEventObjectPreMeeting({\n    name,\n    options,\n    errors,\n  }: {\n    name: ClientEvent['name'];\n    options?: SubmitClientEventOptions;\n    errors?: ClientEventPayloadError;\n  }) {\n    const {correlationId, globalMeetingId, webexConferenceIdStr, preLoginId} = options;\n\n    // grab identifiers\n    const identifiers = this.getIdentifiers({\n      correlationId,\n      preLoginId,\n      globalMeetingId,\n      webexConferenceIdStr,\n    });\n\n    // create client event object\n    const clientEventObject: ClientEvent['payload'] = {\n      name,\n      errors,\n      canProceed: true,\n      identifiers,\n      eventData: {\n        webClientDomain: window.location.hostname,\n      },\n      loginType: this.getCurLoginType(),\n    };\n\n    return clientEventObject;\n  }\n\n  /**\n   * Prepare Client Event CA event.\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - payload\n   * @returns {any} options to be with fetch\n   * @throws\n   */\n  private prepareClientEvent({\n    name,\n    payload,\n    options,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n  }) {\n    const {meetingId, correlationId, rawError} = options;\n    let clientEventObject: ClientEvent['payload'];\n\n    // check if we need to generate errors\n    const errors: ClientEventPayloadError = [];\n\n    if (rawError) {\n      const generatedError = this.generateClientEventErrorPayload(rawError);\n      if (generatedError) {\n        errors.push(generatedError);\n      }\n      this.logger.log(\n        CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n        'CallDiagnosticMetrics: @prepareClientEvent. Generated errors:',\n        `generatedError: ${JSON.stringify(generatedError)}`\n      );\n    }\n\n    // events that will most likely happen in join phase\n    if (meetingId) {\n      clientEventObject = this.createClientEventObjectInMeeting({name, options, errors});\n    } else if (correlationId) {\n      // any pre join events or events that are outside the meeting.\n      clientEventObject = this.createClientEventObjectPreMeeting({name, options, errors});\n    } else {\n      throw new Error('Not implemented');\n    }\n\n    // merge any new properties, or override existing ones\n    clientEventObject = merge(clientEventObject, payload);\n\n    // append client event data to the call diagnostic event\n    const diagnosticEvent = this.prepareDiagnosticEvent(clientEventObject, options);\n\n    return diagnosticEvent;\n  }\n\n  /**\n   * Submit Client Event CA event.\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - payload\n   * @throws\n   */\n  public submitClientEvent({\n    name,\n    payload,\n    options,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n  }) {\n    this.logger.log(\n      CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n      'CallDiagnosticMetrics: @submitClientEvent. Submit Client Event CA event.',\n      `name: ${name}`\n    );\n    const diagnosticEvent = this.prepareClientEvent({name, payload, options});\n\n    if (options?.preLoginId) {\n      return this.submitToCallDiagnosticsPreLogin(diagnosticEvent, options?.preLoginId);\n    }\n\n    this.validator({type: 'ce', event: diagnosticEvent});\n\n    return this.submitToCallDiagnostics(diagnosticEvent);\n  }\n\n  /**\n   * Prepare the event and send the request to metrics-a service.\n   * @param event\n   * @returns promise\n   */\n  submitToCallDiagnostics(event: Event): Promise<any> {\n    // build metrics-a event type\n    const finalEvent = {\n      eventPayload: event,\n      type: ['diagnostic-event'],\n    };\n\n    return this.callDiagnosticEventsBatcher.request(finalEvent);\n  }\n\n  /**\n   * Prepare the event and send the request to metrics-a service, pre login.\n   * @param event\n   * @param preLoginId\n   * @returns\n   */\n  submitToCallDiagnosticsPreLogin = (event: Event, preLoginId?: string): Promise<any> => {\n    // build metrics-a event type\n    const finalEvent = {\n      eventPayload: event,\n      type: ['diagnostic-event'],\n    };\n    this.preLoginMetricsBatcher.savePreLoginId(preLoginId);\n\n    return this.preLoginMetricsBatcher.request(finalEvent);\n  };\n\n  /**\n   * Builds a request options object to later be passed to fetch().\n   * @param arg - submit params\n   * @param arg.event - event key\n   * @param arg.payload - additional payload to be merged with default payload\n   * @param arg.options - client event options\n   * @returns {Promise<any>}\n   * @throws\n   */\n  public async buildClientEventFetchRequestOptions({\n    name,\n    payload,\n    options,\n  }: {\n    name: ClientEvent['name'];\n    payload?: ClientEventPayload;\n    options?: SubmitClientEventOptions;\n  }): Promise<any> {\n    this.logger.log(\n      CALL_DIAGNOSTIC_LOG_IDENTIFIER,\n      'CallDiagnosticMetrics: @buildClientEventFetchRequestOptions. Building request options object for fetch()...',\n      `name: ${name}`\n    );\n\n    const clientEvent = this.prepareClientEvent({name, payload, options});\n\n    // build metrics-a event type\n    // @ts-ignore\n    const diagnosticEvent = prepareDiagnosticMetricItem(this.webex, {\n      eventPayload: clientEvent,\n      type: ['diagnostic-event'],\n    });\n\n    const request = {\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: [diagnosticEvent],\n      },\n      headers: {},\n      // @ts-ignore\n      waitForServiceTimeout: this.webex.internal.metrics.config.waitForServiceTimeout,\n    };\n\n    if (options.preLoginId) {\n      request.headers = {\n        authorization: false,\n        'x-prelogin-userid': options.preLoginId,\n      };\n      request.resource = 'clientmetrics-prelogin';\n    }\n\n    // @ts-ignore\n    return this.webex.prepareFetchOptions(request);\n  }\n\n  /**\n   * Returns true if the specified serviceErrorCode maps to an expected error.\n   * @param {number} serviceErrorCode the service error code\n   * @returns {boolean}\n   */\n  public isServiceErrorExpected(serviceErrorCode: number): boolean {\n    const clientErrorCode = SERVICE_ERROR_CODES_TO_CLIENT_ERROR_CODES_MAP[serviceErrorCode];\n    const clientErrorPayload = CLIENT_ERROR_CODE_TO_ERROR_PAYLOAD[clientErrorCode];\n\n    return clientErrorPayload?.category === 'expected';\n  }\n\n  /**\n   * This method is used to set the device information by internal-plugin-device\n   * @param {device} object The webex.internal.device object\n   * @returns {undefined}\n   */\n  public setDeviceInfo(device: any): void {\n    // This was created to fix the circular dependency between internal-plugin-device and internal-plugin-metrics\n    this.logger.log('CallDiagnosticMetrics: @setDeviceInfo called', device);\n\n    this.device = device;\n  }\n}\n"],"mappings":"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"}