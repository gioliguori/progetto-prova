{"version":3,"names":["_lodash","require","_httpStatus","_interopRequireDefault","_request2","_utils","_progressEvent","_interceptor","_httpError","_detect","protorequest","curry","defaultOptions","options","isString","uri","arguments","forEach","prop","descriptor","_getOwnPropertyDescriptor","default","assign","enumerable","writable","_defineProperty","lodashDefaults","json","_deleteProperty","logger","console","_request","protoprepareFetchOptions","exports","_prepareFetchOptions","setRequestTimings","now","Date","getTime","$timings","requestStart","networkStart","setTimingsAndFetch","opts","fetch","interceptors","HttpStatusInterceptor","create","defaults","request"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {assign, curry, defaults as lodashDefaults, isString} from 'lodash';\n\nimport HttpStatusInterceptor from './interceptors/http-status';\nimport _request from './request';\nimport {prepareFetchOptions as _prepareFetchOptions} from './request/utils';\n\n// Curry protorequest so we generate a function with default options built in.\nconst protorequest = curry(function protorequest(defaultOptions, options) {\n  // allow for options to be a string (and therefore expect options in the third\n  // position) to match request's api.\n  if (isString(options)) {\n    const uri = options;\n\n    /* eslint prefer-rest-params: [0] */\n    options = arguments[2] || {};\n    options.uri = uri;\n  }\n\n  // Hide useless elements from logs\n  ['download', 'interceptors', 'logger', 'upload'].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true,\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  if (!options.json && options.json !== false) {\n    Reflect.deleteProperty(options, 'json');\n  }\n\n  options.logger = options.logger || this.logger || console;\n\n  return _request(options);\n});\n\nexport const protoprepareFetchOptions = curry(function protoprepareFetchOptions(\n  defaultOptions,\n  options\n) {\n  // Hide useless elements from logs\n  ['download', 'interceptors', 'logger', 'upload'].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true,\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  options.logger = options.logger || this.logger || console;\n\n  return _prepareFetchOptions(options);\n});\n\n/**\n * Sets the $timings value(s) before the request/fetch.\n * This function is only useful if you are about to send a request\n * using prepared fetch options; normally it is done in webex.request();\n *\n * @param {any} options\n * @returns {any} the updated options object\n */\nconst setRequestTimings = (options) => {\n  const now = new Date().getTime();\n  options.$timings = options.$timings || {};\n  options.$timings.requestStart = now;\n  options.$timings.networkStart = now;\n\n  return options;\n};\n\n/**\n * Submits a metric from pre-built request options via the fetch API. Updates\n * the \"$timings\" values to Date.now() since the existing times were set when\n * the options were built (not submitted).\n *\n * @param {any} options - the pre-built request options for submitting a metric\n * @returns {Promise} promise that resolves to a response object\n */\nexport const setTimingsAndFetch = (options) => {\n  const opts = setRequestTimings(options);\n\n  // call the fetch API\n  return fetch(opts.uri, opts);\n};\n\nconst defaultOptions = {\n  json: true,\n  interceptors: [\n    // Reminder: this is supposed to be an instantiated interceptor.\n    HttpStatusInterceptor.create(),\n  ],\n};\n\nexport const defaults = protorequest;\nexport const request = protorequest(defaultOptions);\nexport {default as ProgressEvent} from './progress-event';\nexport {default as Interceptor} from './lib/interceptor';\nexport {default as HttpError} from './http-error';\nexport {default as HttpStatusInterceptor} from './interceptors/http-status';\nexport {default as detect} from './lib/detect';\n"],"mappings":"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"}