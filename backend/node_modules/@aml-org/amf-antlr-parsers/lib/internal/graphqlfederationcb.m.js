import antlr4 from 'antlr4';
import GraphqlFederationLexer from './graphqlfederation/GraphQLFederationLexer.js';
import GraphqlFederationParser from './graphqlfederation/GraphQLFederationParser.js';
import GraphqlFederationListener from './graphqlfederation/GraphQLFederationListener.js';

export class GraphqlFederationASTBuilderCB extends GraphqlFederationListener {

    visitTerminal(node) {
        this.cb.visitTerminal(node, this.parser)
    }

    visitErrorNode(node) {
        this.cb.visitErrorNode(node, this.parser)
    }

    enterEveryRule(node) {
        this.cb.enterEveryRule(node, this.parser)
    }


    exitEveryRule(node) {
        this.cb.exitEveryRule()
    }

    run(input, cb, errorListener) {
        this.cb = cb;
        const chars = new antlr4.InputStream(input);
        const lexer = new GraphqlFederationLexer(chars);
        lexer.removeErrorListeners();
        lexer.addErrorListener(errorListener)
        const tokens = new antlr4.CommonTokenStream(lexer);
        const parser = new GraphqlFederationParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(errorListener)
        this.parser = parser
        this.parser.buildParseTrees = true;
        const tree = this.parser.document();
        antlr4.tree.ParseTreeWalker.DEFAULT.walk(this, tree);
    }
}
